version: '2'

volumes:
  training-volume:
  ssh-keygen-volume:
  jenkins-home-volume:

services:

  # traefik reverse proxy to expose the jupyter and jenkins servers over ssl via a common hostname
  traefik:
    image: traefik:latest
    mem_limit: 512m
    command: --debug=True --docker --docker.watch --web --web.address=:28443 --entryPoints='Name:http Address::80 --entryPoints='Name:https Address::443 --defaultEntryPoints='http,https'
    ports:
      - '443:443'
      - '80:80'
      - '28443:28443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # This is a single shot container that creates a set of ssh keys per instance
  # and deploys them to a persistent volume shared between the sandbox and
  # jupyter container. By doing this, we don't need to ship keys with the image
  # or source.
  ssh-keygen:
    image: agaveplatform/rstudio:3.4.3
    entrypoint: /bin/bash
    command: /usr/local/bin/ssh-keygen/keygen.sh
    environment:
      - "ROOT=TRUE"
      - "USER=${AGAVE_USERNAME}"
      - "PASSWORD=${AGAVE_PASSWORD}"
      - "AGAVE_USERNAME=${AGAVE_USERNAME}"
      - "AGAVE_PASSWORD=${AGAVE_PASSWORD}"
      - "AGAVE_TENANT=${AGAVE_TENANT}"
      - "AGAVE_CACHE_DIR=/home/rstudio/work/.agave"
      - "S6_KEEP_ENV=1"
    env_file:
      - training.env
    volumes:
      - ssh-keygen-volume:/home/rstudio/.ssh
      - ./docker/ssh-keygen:/usr/local/bin/ssh-keygen

  rstudio:
    image: agaveplatform/rstudio:3.4.3
    mem_limit: 2048m
    restart: on-failure
    ports:
      - '8787:8787'
    depends_on:
      - ssh-keygen
    env_file:
      - training.env
    environment:
      - "ROOT=TRUE"
      - "USER=${AGAVE_USERNAME}"
      - "PASSWORD=${AGAVE_PASSWORD}"
      - "AGAVE_CACHE_DIR=/home/${AGAVE_USERNAME}/work/.agave"
      - "AGAVE_TENANT_BASE_URL=https://agaveapi.co"
      - "AGAVE_BASE_URL=https://public.agaveapi.co"
      - "S6_KEEP_ENV=1"
      - "SHINY_CONNECT_USERNAME=${SHINY_CONNECT_USERNAME}"
      - "SHINY_CONNECT_TOKEN=${SHINY_CONNECT_TOKEN}"
      - "SHINY_CONNECT_SECRET=${SHINY_CONNECT_SECRET}"
    volumes:
      - "ssh-keygen-volume:/home/$AGAVE_USERNAME/.ssh"
      - "training-volume:/home/$AGAVE_USERNAME/work"
      - ".:/home/$AGAVE_USERNAME/notebooks"
      - "./INSTALL.ipynb:/home/$AGAVE_USERNAME/INSTALL.ipynb"
    labels:
      - "traefik.port=8787"
      - "traefik.protocol=http"
      - "traefik.tags=$AGAVE_USERNAME,jupyter"
      - "traefik.backend=$AGAVE_USERNAME-training"
      - "traefik.frontend.rule=PathPrefix:/"

  sandbox:
    image: agaveplatform/training-sandbox:latest
    mem_limit: 2048m
    privileged: True
    restart: on-failure
    ports:
      - '10022:22'
    depends_on:
      - ssh-keygen
    env_file:
      - training.env
    environment:
      - VM_MACHINE=$$ENVIRONMENT-node-$$AGAVE_USERNAME
    volumes:
      - ssh-keygen-volume:/home/jovyan/.ssh
      - training-volume:/home/jovyan/work
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=false

#  jenkins:
#    build:
#      context: jenkins
#      dockerfile: Dockerfile
#    image: agaveplatform/jenkins:sc18
#    mem_limit: 2048m
#    privileged: True
#    restart: on-failure
#    ports:
#      - '8080:8080'
#      - '8443:8443'
#    depends_on:
#      - ssh-keygen
#    env_file:
#      - training.env
#    environment:
#      - AGAVE_CACHE_DIR=/var/jenkins_home/.$AGAVE_TENANT
##      - JENKINS_OPTS="--prefix=/jenkins "
#    volumes:
#      - ssh-keygen-volume:/var/jenkins_home/.ssh
##      - jenkins-home-volume:/var/jenkins_home
#    labels:
#      - "traefik.port=8080"
#      - "traefik.protocol=http"
#      - "traefik.tags=jenkins"
#      - "traefik.backend=jenkins"
#      - "traefik.frontend.rule=PathPrefix:/jenkins"
#      - "traefik.frontend.passHostHeader=true"
